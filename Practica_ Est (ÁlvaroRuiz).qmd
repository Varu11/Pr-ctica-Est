---
format: html
editor: visual
  markdown: 
    wrap: 72
---library
---

Vasmos a cargar el dataset de AirBnB descargado de [aquí](https://public.opendatasoft.com/explore/dataset/airbnb-listings/export/?disjunctive.host_verifications&disjunctive.amenities&disjunctive.features&q=Madrid&dataChart=eyJxdWVyaWVzIjpbeyJjaGFydHMiOlt7InR5cGUiOiJjb2x1bW4iLCJmdW5jIjoiQ09VTlQiLCJ5QXhpcyI6Imhvc3RfbGlzdGluZ3NfY291bnQiLCJzY2llbnRpZmljRGlzcGxheSI6dHJ1ZSwiY29sb3IiOiJyYW5nZS1jdXN0b20ifV0sInhBeGlzIjoiY2l0eSIsIm1heHBvaW50cyI6IiIsInRpbWVzY2FsZSI6IiIsInNvcnQiOiIiLCJzZXJpZXNCcmVha2Rvd24iOiJyb29tX3R5cGUiLCJjb25maWciOnsiZGF0YXNldCI6ImFpcmJuYi1saXN0aW5ncyIsIm9wdGlvbnMiOnsiZGlzanVuY3RpdmUuaG9zdF92ZXJpZmljYXRpb25zIjp0cnVlLCJkaXNqdW5jdGl2ZS5hbWVuaXRpZXMiOnRydWUsImRpc2p1bmN0aXZlLmZlYXR1cmVzIjp0cnVlfX19XSwidGltZXNjYWxlIjoiIiwiZGlzcGxheUxlZ2VuZCI6dHJ1ZSwiYWxpZ25Nb250aCI6dHJ1ZX0%3D&location=16,41.38377,2.15774&basemap=jawg.streets)

![](descargar.png)

```{r}
airbnb<-read.csv('airbnb-listings.csv',sep = ';')
options(repr.plot.height=4,repr.plot.width=6,repr.plot.res = 300)
head(airbnb)
```

1.  Vamos a quedarnos con las columnas de mayor interés: 'City','Room.Type','Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds','Price','Square.Feet','Guests.Included','Extra.People','Review.Scores.Rating','Latitude', 'Longitude' Nos quedaremos solo con las entradas de Madrid para Room.Type=="Entire home/apt" y cuyo barrio (Neighbourhood) no está vacio ''
Podemos eliminar las siguientes columnas que ya no son necesarias: "Room.Type",'City' Llama a nuevo dataframe df_madrid.
```{r}
library(dplyr)

df_madrid <- airbnb %>%
  filter(City == 'Madrid' & Neighbourhood != '' & Room.Type=="Entire home/apt") %>% 
  select(-c(Room.Type, City))
head(df_madrid)
```

2.  Crea una nueva columna llamada Square.Meters a partir de Square.Feet.}
#Recuerda que un pie cuadrado son 0.092903 metros cuadrados
```{r}
df_madrid$Square.Meters <- df_madrid$Square.Feet*0.092903
df_madrid
```

------------------------------------------------------------------------

3.  ¿Que porcentaje de los apartamentos no muestran los metros cuadrados? Es decir, ¿cuantos tienen NA en Square.Meters?
data = {'Square.Feet'}

```{r}
num_na <- sum(is.na(df_madrid$Square.Meters))

# Calcular el número total de apartamentos
total_apartments <- nrow(df_madrid)

# Calcular el porcentaje de apartamentos con valores NA en 'Square.Meters'
percentage_na <- (num_na / total_apartments) * 100
cat("El porcentaje de apartamentos que no muestran los metros cuadrados es:", percentage_na, "%\n")
```

------------------------------------------------------------------------

4.  De todos los apartamentos que tienen un valor de metros cuadrados diferente de NA ¿Que porcentaje de los apartamentos tienen 0 metros cuadrados?

```{r}

# Filtrar los apartamentos que tienen un valor de metros cuadrados diferente de NA
non_na_apartments <- df_madrid[!is.na(df_madrid$Square.Meters), ]

# Calcular el número de apartamentos con 0 metros cuadrados
num_zero_meters <- sum(non_na_apartments$Square.Meters == 0)

# Calcular el número total de apartamentos con valor de metros cuadrados diferente de NA
total_non_na_apartments <- nrow(non_na_apartments)

# Calcular el porcentaje de apartamentos con 0 metros cuadrados
percentage_zero_meters <- (num_zero_meters / total_non_na_apartments) * 100

# Mostrar el resultado
cat("El porcentaje de apartamentos con 0 metros cuadrados es:", percentage_zero_meters, "%\n")
```

------------------------------------------------------------------------
5.  Reemplazar todos los 0m\^2 por NA

```{r}
df_madrid$Square.Meters <- ifelse(df_madrid$Square.Meters == 0, NA, df_madrid$Square.Meters)

df_madrid
```

------------------------------------------------------------------------

Hay muchos NAs, vamos a intentar crear un modelo que nos prediga cuantos son los metros cuadrados en función del resto de variables para tratar de rellenar esos NA. Pero **antes de crear el modelo** vamos a hacer: \* pintar el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más. \* crear una variable sintética nueva basada en la similitud entre barrios que usaremos en nuestro modelo.

6.  Pinta el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más

```{r}
hist(df_madrid$Square.Meters, main = "Histograma de Square.Meters", xlab = "Metros Cuadrados", ylab = "Frecuencia", col = "red", border = "black", breaks = 20, na.rm = TRUE)
```
```{r}
library(ggplot2)
ggplot(df_madrid, aes(x = Square.Meters)) + 
  geom_histogram(binwidth = 10, fill = "red", color = "black") + 
  labs(title = "Histograma de Square.Meters", 
       x = "Metros Cuadrados", 
       y = "Frecuencia") + 
  theme_minimal()
```

------------------------------------------------------------------------

7.  Asigna el valor NA a la columna Square.Meters de los apartamentos que tengan menos de 20 m\^2

```{r}
condicion <- df_madrid$Square.Meters < 20
df_madrid$Square.Meters <- ifelse(condicion, NA, df_madrid$Square.Meters)
df_madrid
```

------------------------------------------------------------------------

8.  Existen varios Barrios que todas sus entradas de Square.Meters son NA, vamos a eliminar del dataset todos los pisos que pertenecen a estos barrios.

```{r}
df_madrid %>% 
  filter(is.na(Square.Meters)) %>% 
  group_by(Neighbourhood) %>% 
  summarise(freq_na = n()) %>% 
  arrange(desc(freq_na))
```

```{r}
df_madrid_na <- df_madrid

df_madrid <- df_madrid %>% 
  filter(!is.na(Square.Meters))

df_madrid
```

------------------------------------------------------------------------

9.  ¿Tienen todos los barrios los mismos metros cuadrados de media? ¿Con que test lo comprobarías?
# Test de ANOVA (si es distribución normal) o Kruskal, para hallar el p_valor
# Si los elementos siguen distribución gausiana, hacer test de Saphiro


```{r}
table(df_madrid$Neighbourhood)
```

```{r}
shapiro_test <- function(group){
  shapiro.test(df_madrid$Square.Meters[df_madrid$Neighbourhood == group])
}

results <- lapply(unique(df_madrid$Neighbourhood), shapiro_test)
names(results) <- unique(df_madrid$Neighbourhood)
results
```


```{r}
model <- aov(formula = Square.Meters ~ Neighbourhood, data = df_madrid)
summary(model)
```

------------------------------------------------------------------------

10.  Vamos a agrupar los barrios por metros cuadrados. Podemos usar una matriz de similaridad de Tukey. Muestra como de similares o diferentes son los barrios si nos fijámos únicamente en los metros cuadrados de los pisos. ¿Como se diferencia la media del Barrio A al Barrio B? (Es decir, cual sería el pvalor suponiendo una H0 en la que las medias son iguales)

#Test de Tukey tras hacer el ANOVA

```{r}
tky<-TukeyHSD(aov(Square.Meters ~ Neighbourhood, data=df_madrid ))
tky.result<-data.frame(tky$Neighbourhood)
cn <-sort(unique(df_madrid$Neighbourhood))
resm <- matrix(NA, length(cn), length(cn))
rownames(resm) <- cn
colnames(resm) <- cn
resm[lower.tri(resm) ] <- round(tky.result$p.adj,4)
resm[upper.tri(resm)] <- t(resm[upper.tri(resm)])
diag(resm) <- 1
distance_matrix <- 1 - resm
resm
```


------------------------------------------------------------------------

11. En el punto anterior has creado una matriz de p-valores que indica como de parecidos son dos barrios. Si su pvalor es alto significa que los barrios son diferentes, si es bajo significa que los barrios se parecen. Esta matriz la podemos usar como matriz de distancia si restamos el pvalor a 1. Es decir si usamos como distancia 1-pvalor. De esta forma barrios con un pvalor alto tendrán una distancia mayor que aquellos con un pvalor bajo. Usando esta última métrica como matriz de distancias dibuja un dendrograma de los diferentes barrios.

```{r}
# Instalar y cargar las librerías necesarias

library(factoextra)
library(RColorBrewer)

# Suponiendo que 'resm' es una matriz de distancia o datos
# Convertir 'resm' a una matriz de distancia si es necesario
# dist_matrix <- as.dist(resm) # Si 'resm' no es ya una matriz de distancia

hc <- hclust(as.dist(1-resm)) # Si 'resm' es ya una matriz de distancia, omite as.dist()

# Visualizar el dendrograma con factoextra
fviz_dend(hc, 
          cex = 0.5,                   # Tamaño del texto para las etiquetas
          lwd = 0.8,                   # Grosor de las líneas del dendrograma
          k = 5,                       # Número de clusters
          rect = FALSE,                 # Dibujar rectángulos alrededor de los clusters
          rect_border = "black",         # Color del borde de los rectángulos (paleta "jco")
          rect_fill = FALSE,            # Relleno de los rectángulos
          rect_fill_alpha = 0.2,       # Transparencia del relleno
          k_colors = brewer.pal(n = 1, name = "Set3"), # Colores de los clusters
          main = "Dendrograma de barrios",
          xlab = "Elementos", 
          ylab = "Altura",
          sub = "")
```

13. Vamos a crear una nueva columna en el dataframe df_madrid con un nuevo identificador marcado por los clusters obtenidos. Esta columna la llamaremos neighb_id

```{r}
df_clusters <- data.frame(Neighbourhood = names(clusters), neighb_id = clusters)
df_madrid <- merge(df_madrid, df_clusters, by = "Neighbourhood")
df_madrid
```

------------------------------------------------------------------------

14. Vamos a crear dos grupos, uno test y otro train.

```{r}
n <- nrow(df_madrid)
test_size <- 0.3

set.seed(123) 

n_test <- as.integer(n*test_size)

idx_test <- sample(1:n, n_test)

test <- df_madrid[idx_test,]
train <- df_madrid[-idx_test,]
train
```

------------------------------------------------------------------------

15. Tratamos de predecir los metros cuadrados en función del resto de columnas del dataframe. \# VEAMOS ESTO CON CABEZA.NO METAMOS BARRIOS,NI LATITUD-LONGITUD... 
#CUANTO MÁS REDUZCAMOS EL MODELO, MEJOR
#Hacer 2 modelos: train y test.
#No usar el barrio,ni latitud ni longitud

```{r}
model <- lm(formula = Square.Meters ~ Accommodates + Bathrooms + Bedrooms + Price, data = train)
summary(model)
```

------------------------------------------------------------------------

16. Evaluar la calidad de vuestro modelo #HACER UN PREDICT

```{r}
y_pred <- predict(model, newdata = test)

error <- y_pred - test$Square.Meters
error2 <- error**2

mse <- mean(error2)
rmse <- sqrt(mse)
rmse
```

------------------------------------------------------------------------

17. Si tuvieramos un anuncio de un apartamento para 6 personas (Accommodates), con 1 baño, con un precio de 80€/noche y 3 habitaciones en el barrio de Sol, con 3 camas y un review de 80.
¿Cuantos metros cuadrados tendría?

```{r}
model <- lm(formula = Square.Meters ~ Accommodates + Bathrooms + Bedrooms + Price + Review.Scores.Rating, data = train)
```

#Hacer un predict: 
Si tu modelo necesita algúna variable adicional puedes inventartela dentro del rango de valores del dataset.
¿Como varía sus metros cuadrados con cada habitación adicional?
#Valor del coeficiente asociado a las habitaciones


```{r}
df.pred <- data.frame(Accommodates=6, Bathrooms=1, Price=80, Review.Scores.Rating=80, Bedrooms=c(3,4))
df.pred

y_pred <- predict(model, newdata = df.pred)
y_pred

diff(y_pred)
model

```

------------------------------------------------------------------------

18. Rellenar los Square.Meters con valor NA con el estimado con el modelo anterior.

```{r}
cond <- is.na(df_madrid_na$Square.Meters)
pred <- predict(model, df_madrid_na)

df_madrid_na$Square.Meters <- ifelse(cond, pred, df_madrid_na$Square.Meters)
df_madrid_na
```

------------------------------------------------------------------------
