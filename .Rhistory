# Instalar y cargar las librerías necesarias
# Instalar y cargar las librerías necesarias
library(factoextra)
library(RColorBrewer)
# Suponiendo que 'resm' es una matriz de distancia o datos
# Convertir 'resm' a una matriz de distancia si es necesario
# dist_matrix <- as.dist(resm) # Si 'resm' no es ya una matriz de distancia
# Realizar el clustering jerárquico
hc <- hclust(as.dist(resm)) # Si 'resm' es ya una matriz de distancia, omite as.dist()
# Visualizar el dendrograma con factoextra
fviz_dend(hc,
cex = 0.5,                   # Tamaño del texto para las etiquetas
lwd = 0.8,                   # Grosor de las líneas del dendrograma
k = 5,                       # Número de clusters
rect = TRUE,                 # Dibujar rectángulos alrededor de los clusters
rect_border = "jco",         # Color del borde de los rectángulos (paleta "jco")
rect_fill = TRUE,            # Relleno de los rectángulos
rect_fill_alpha = 0.4,       # Transparencia del relleno
k_colors = brewer.pal(n = 0, name = "Set3"), # Colores de los clusters
main = "Dendrograma de Clustering Jerárquico",
xlab = "Elementos",
ylab = "Altura",
sub = "")
# Instalar y cargar las librerías necesarias
# Instalar y cargar las librerías necesarias
library(factoextra)
library(RColorBrewer)
# Suponiendo que 'resm' es una matriz de distancia o datos
# Convertir 'resm' a una matriz de distancia si es necesario
# dist_matrix <- as.dist(resm) # Si 'resm' no es ya una matriz de distancia
# Realizar el clustering jerárquico
hc <- hclust(as.dist(1-resm)) # Si 'resm' es ya una matriz de distancia, omite as.dist()
# Visualizar el dendrograma con factoextra
fviz_dend(hc,
cex = 0.5,                   # Tamaño del texto para las etiquetas
lwd = 0.8,                   # Grosor de las líneas del dendrograma
k = 5,                       # Número de clusters
rect = TRUE,                 # Dibujar rectángulos alrededor de los clusters
rect_border = "jco",         # Color del borde de los rectángulos (paleta "jco")
rect_fill = TRUE,            # Relleno de los rectángulos
rect_fill_alpha = 0.4,       # Transparencia del relleno
k_colors = brewer.pal(n = 0, name = "Set3"), # Colores de los clusters
main = "Dendrograma de Clustering Jerárquico",
xlab = "Elementos",
ylab = "Altura",
sub = "")
library(RColorBrewer)
# Suponiendo que 'resm' es una matriz de distancia o datos
# Convertir 'resm' a una matriz de distancia si es necesario
# dist_matrix <- as.dist(resm) # Si 'resm' no es ya una matriz de distancia
# Realizar el clustering jerárquico
hc <- hclust(as.dist(1-resm)) # Si 'resm' es ya una matriz de distancia, omite as.dist()
# Visualizar el dendrograma con factoextra
fviz_dend(hc,
cex = 0.5,                   # Tamaño del texto para las etiquetas
lwd = 0.8,                   # Grosor de las líneas del dendrograma
k = 5,                       # Número de clusters
rect = TRUE,                 # Dibujar rectángulos alrededor de los clusters
rect_border = "jco",         # Color del borde de los rectángulos (paleta "jco")
rect_fill = TRUE,            # Relleno de los rectángulos
rect_fill_alpha = 0.4,       # Transparencia del relleno
k_colors = brewer.pal(n = 5, name = "Set3"), # Colores de los clusters
main = "Dendrograma de Clustering Jerárquico",
xlab = "Elementos",
ylab = "Altura",
sub = "")
# Instalar y cargar las librerías necesarias
# Instalar y cargar las librerías necesarias
library(factoextra)
library(RColorBrewer)
# Suponiendo que 'resm' es una matriz de distancia o datos
# Convertir 'resm' a una matriz de distancia si es necesario
# dist_matrix <- as.dist(resm) # Si 'resm' no es ya una matriz de distancia
# Realizar el clustering jerárquico
hc <- hclust(as.dist(1-resm)) # Si 'resm' es ya una matriz de distancia, omite as.dist()
# Visualizar el dendrograma con factoextra
fviz_dend(hc,
cex = 0.5,                   # Tamaño del texto para las etiquetas
lwd = 0.8,                   # Grosor de las líneas del dendrograma
k = 5,                       # Número de clusters
rect = TRUE,                 # Dibujar rectángulos alrededor de los clusters
rect_border = "jco",         # Color del borde de los rectángulos (paleta "jco")
rect_fill = TRUE,            # Relleno de los rectángulos
rect_fill_alpha = 0.4,       # Transparencia del relleno
k_colors = brewer.pal(n = 0, name = "Set3"), # Colores de los clusters
main = "Dendrograma de barrios",
xlab = "Elementos",
ylab = "Altura",
sub = "")
library(RColorBrewer)
# Suponiendo que 'resm' es una matriz de distancia o datos
# Convertir 'resm' a una matriz de distancia si es necesario
# dist_matrix <- as.dist(resm) # Si 'resm' no es ya una matriz de distancia
# Realizar el clustering jerárquico
hc <- hclust(as.dist(1-resm)) # Si 'resm' es ya una matriz de distancia, omite as.dist()
# Visualizar el dendrograma con factoextra
fviz_dend(hc,
cex = 0.5,                   # Tamaño del texto para las etiquetas
lwd = 0.8,                   # Grosor de las líneas del dendrograma
k = 5,                       # Número de clusters
rect = TRUE,                 # Dibujar rectángulos alrededor de los clusters
rect_border = "jco",         # Color del borde de los rectángulos (paleta "jco")
rect_fill = TRUE,            # Relleno de los rectángulos
rect_fill_alpha = 0.4,       # Transparencia del relleno
k_colors = brewer.pal(n = 5, name = "Set3"), # Colores de los clusters
main = "Dendrograma de barrios",
xlab = "Elementos",
ylab = "Altura",
sub = "")
df_clusters <- data.frame(Neighbourhood = names(clusters), neighb_id = clusters)
df_madrid <- merge(df_madrid, df_clusters, by = "Neighbourhood")
df_madrid
# Instalar y cargar las librerías necesarias
# Instalar y cargar las librerías necesarias
library(factoextra)
library(RColorBrewer)
# Suponiendo que 'resm' es una matriz de distancia o datos
# Convertir 'resm' a una matriz de distancia si es necesario
# dist_matrix <- as.dist(resm) # Si 'resm' no es ya una matriz de distancia
# Realizar el clustering jerárquico
hc <- hclust(as.dist(1-resm)) # Si 'resm' es ya una matriz de distancia, omite as.dist()
# Visualizar el dendrograma con factoextra
fviz_dend(hc,
cex = 0.5,                   # Tamaño del texto para las etiquetas
lwd = 0.8,                   # Grosor de las líneas del dendrograma
k = 5,                       # Número de clusters
rect = TRUE,                 # Dibujar rectángulos alrededor de los clusters
rect_border = "jco",         # Color del borde de los rectángulos (paleta "jco")
rect_fill = TRUE,            # Relleno de los rectángulos
rect_fill_alpha = 0.4,       # Transparencia del relleno
k_colors = brewer.pal(n = 0, name = "Set3"), # Colores de los clusters
main = "Dendrograma de barrios",
xlab = "Elementos",
ylab = "Altura",
sub = "")
´´´
# Instalar y cargar las librerías necesarias
# Instalar y cargar las librerías necesarias
library(factoextra)
library(RColorBrewer)
# Suponiendo que 'resm' es una matriz de distancia o datos
# Convertir 'resm' a una matriz de distancia si es necesario
# dist_matrix <- as.dist(resm) # Si 'resm' no es ya una matriz de distancia
# Realizar el clustering jerárquico
hc <- hclust(as.dist(1-resm)) # Si 'resm' es ya una matriz de distancia, omite as.dist()
# Visualizar el dendrograma con factoextra
fviz_dend(hc,
cex = 0.5,                   # Tamaño del texto para las etiquetas
lwd = 0.8,                   # Grosor de las líneas del dendrograma
k = 5,                       # Número de clusters
rect = TRUE,                 # Dibujar rectángulos alrededor de los clusters
rect_border = "jco",         # Color del borde de los rectángulos (paleta "jco")
rect_fill = TRUE,            # Relleno de los rectángulos
rect_fill_alpha = 0.0,       # Transparencia del relleno
k_colors = brewer.pal(n = 0, name = "Set3"), # Colores de los clusters
main = "Dendrograma de barrios",
xlab = "Elementos",
ylab = "Altura",
sub = "")
´´´
# Instalar y cargar las librerías necesarias
# Instalar y cargar las librerías necesarias
library(factoextra)
library(RColorBrewer)
# Suponiendo que 'resm' es una matriz de distancia o datos
# Convertir 'resm' a una matriz de distancia si es necesario
# dist_matrix <- as.dist(resm) # Si 'resm' no es ya una matriz de distancia
# Realizar el clustering jerárquico
hc <- hclust(as.dist(1-resm)) # Si 'resm' es ya una matriz de distancia, omite as.dist()
# Visualizar el dendrograma con factoextra
fviz_dend(hc,
cex = 0.5,                   # Tamaño del texto para las etiquetas
lwd = 0.8,                   # Grosor de las líneas del dendrograma
k = 5,                       # Número de clusters
rect = TRUE,                 # Dibujar rectángulos alrededor de los clusters
rect_border = "jco",         # Color del borde de los rectángulos (paleta "jco")
rect_fill = TRUE,            # Relleno de los rectángulos
rect_fill_alpha = 0.0,       # Transparencia del relleno
k_colors = brewer.pal(n = 0, name = "Set3"), # Colores de los clusters
main = "Dendrograma de barrios",
xlab = "Elementos",
ylab = "Altura",
sub = "")
# Instalar y cargar las librerías necesarias
# Instalar y cargar las librerías necesarias
library(factoextra)
library(RColorBrewer)
# Suponiendo que 'resm' es una matriz de distancia o datos
# Convertir 'resm' a una matriz de distancia si es necesario
# dist_matrix <- as.dist(resm) # Si 'resm' no es ya una matriz de distancia
# Realizar el clustering jerárquico
hc <- hclust(as.dist(1-resm)) # Si 'resm' es ya una matriz de distancia, omite as.dist()
# Visualizar el dendrograma con factoextra
fviz_dend(hc,
cex = 0.5,                   # Tamaño del texto para las etiquetas
lwd = 0.8,                   # Grosor de las líneas del dendrograma
k = 5,                       # Número de clusters
rect = FALSE,                 # Dibujar rectángulos alrededor de los clusters
rect_border = "jco",         # Color del borde de los rectángulos (paleta "jco")
rect_fill = TRUE,            # Relleno de los rectángulos
rect_fill_alpha = 0.0,       # Transparencia del relleno
k_colors = brewer.pal(n = 0, name = "Set3"), # Colores de los clusters
main = "Dendrograma de barrios",
xlab = "Elementos",
ylab = "Altura",
sub = "")
# Instalar y cargar las librerías necesarias
# Instalar y cargar las librerías necesarias
library(factoextra)
library(RColorBrewer)
# Suponiendo que 'resm' es una matriz de distancia o datos
# Convertir 'resm' a una matriz de distancia si es necesario
# dist_matrix <- as.dist(resm) # Si 'resm' no es ya una matriz de distancia
# Realizar el clustering jerárquico
hc <- hclust(as.dist(1-resm)) # Si 'resm' es ya una matriz de distancia, omite as.dist()
# Visualizar el dendrograma con factoextra
fviz_dend(hc,
cex = 0.5,                   # Tamaño del texto para las etiquetas
lwd = 0.8,                   # Grosor de las líneas del dendrograma
k = 5,                       # Número de clusters
rect = FALSE,                 # Dibujar rectángulos alrededor de los clusters
rect_border = "blue",         # Color del borde de los rectángulos (paleta "jco")
rect_fill = TRUE,            # Relleno de los rectángulos
rect_fill_alpha = 0.0,       # Transparencia del relleno
k_colors = brewer.pal(n = 0, name = "Set3"), # Colores de los clusters
main = "Dendrograma de barrios",
xlab = "Elementos",
ylab = "Altura",
sub = "")
# Instalar y cargar las librerías necesarias
# Instalar y cargar las librerías necesarias
library(factoextra)
library(RColorBrewer)
# Suponiendo que 'resm' es una matriz de distancia o datos
# Convertir 'resm' a una matriz de distancia si es necesario
# dist_matrix <- as.dist(resm) # Si 'resm' no es ya una matriz de distancia
# Realizar el clustering jerárquico
hc <- hclust(as.dist(1-resm)) # Si 'resm' es ya una matriz de distancia, omite as.dist()
# Visualizar el dendrograma con factoextra
fviz_dend(hc,
cex = 0.5,                   # Tamaño del texto para las etiquetas
lwd = 0.8,                   # Grosor de las líneas del dendrograma
k = 5,                       # Número de clusters
rect = FALSE,                 # Dibujar rectángulos alrededor de los clusters
rect_border = "blue",         # Color del borde de los rectángulos (paleta "jco")
rect_fill = TRUE,            # Relleno de los rectángulos
rect_fill_alpha = 0.1,       # Transparencia del relleno
k_colors = brewer.pal(n = 0, name = "Set3"), # Colores de los clusters
main = "Dendrograma de barrios",
xlab = "Elementos",
ylab = "Altura",
sub = "")
# Instalar y cargar las librerías necesarias
# Instalar y cargar las librerías necesarias
library(factoextra)
library(RColorBrewer)
# Suponiendo que 'resm' es una matriz de distancia o datos
# Convertir 'resm' a una matriz de distancia si es necesario
# dist_matrix <- as.dist(resm) # Si 'resm' no es ya una matriz de distancia
# Realizar el clustering jerárquico
hc <- hclust(as.dist(1-resm)) # Si 'resm' es ya una matriz de distancia, omite as.dist()
# Visualizar el dendrograma con factoextra
fviz_dend(hc,
cex = 0.5,                   # Tamaño del texto para las etiquetas
lwd = 0.8,                   # Grosor de las líneas del dendrograma
k = 5,                       # Número de clusters
rect = FALSE,                 # Dibujar rectángulos alrededor de los clusters
rect_border = "blue",         # Color del borde de los rectángulos (paleta "jco")
rect_fill = TRUE,            # Relleno de los rectángulos
rect_fill_alpha = 0.2,       # Transparencia del relleno
k_colors = brewer.pal(n = 0, name = "Set3"), # Colores de los clusters
main = "Dendrograma de barrios",
xlab = "Elementos",
ylab = "Altura",
sub = "")
# Instalar y cargar las librerías necesarias
# Instalar y cargar las librerías necesarias
library(factoextra)
library(RColorBrewer)
# Suponiendo que 'resm' es una matriz de distancia o datos
# Convertir 'resm' a una matriz de distancia si es necesario
# dist_matrix <- as.dist(resm) # Si 'resm' no es ya una matriz de distancia
# Realizar el clustering jerárquico
hc <- hclust(as.dist(1-resm)) # Si 'resm' es ya una matriz de distancia, omite as.dist()
# Visualizar el dendrograma con factoextra
fviz_dend(hc,
cex = 0.5,                   # Tamaño del texto para las etiquetas
lwd = 0.8,                   # Grosor de las líneas del dendrograma
k = 5,                       # Número de clusters
rect = FALSE,                 # Dibujar rectángulos alrededor de los clusters
rect_border = "blue",         # Color del borde de los rectángulos (paleta "jco")
rect_fill = TRUE,            # Relleno de los rectángulos
rect_fill_alpha = 0.2,       # Transparencia del relleno
k_colors = brewer.pal(n = 0, name = "blue"), # Colores de los clusters
main = "Dendrograma de barrios",
xlab = "Elementos",
ylab = "Altura",
sub = "")
# Instalar y cargar las librerías necesarias
# Instalar y cargar las librerías necesarias
library(factoextra)
library(RColorBrewer)
# Suponiendo que 'resm' es una matriz de distancia o datos
# Convertir 'resm' a una matriz de distancia si es necesario
# dist_matrix <- as.dist(resm) # Si 'resm' no es ya una matriz de distancia
# Realizar el clustering jerárquico
hc <- hclust(as.dist(1-resm)) # Si 'resm' es ya una matriz de distancia, omite as.dist()
# Visualizar el dendrograma con factoextra
fviz_dend(hc,
cex = 0.5,                   # Tamaño del texto para las etiquetas
lwd = 0.8,                   # Grosor de las líneas del dendrograma
k = 5,                       # Número de clusters
rect = FALSE,                 # Dibujar rectángulos alrededor de los clusters
rect_border = "blue",         # Color del borde de los rectángulos (paleta "jco")
rect_fill = TRUE,            # Relleno de los rectángulos
rect_fill_alpha = 0.2,       # Transparencia del relleno
k_colors = brewer.pal(n = 0, name = "Set4"), # Colores de los clusters
main = "Dendrograma de barrios",
xlab = "Elementos",
ylab = "Altura",
sub = "")
# Instalar y cargar las librerías necesarias
# Instalar y cargar las librerías necesarias
library(factoextra)
library(RColorBrewer)
# Suponiendo que 'resm' es una matriz de distancia o datos
# Convertir 'resm' a una matriz de distancia si es necesario
# dist_matrix <- as.dist(resm) # Si 'resm' no es ya una matriz de distancia
# Realizar el clustering jerárquico
hc <- hclust(as.dist(1-resm)) # Si 'resm' es ya una matriz de distancia, omite as.dist()
# Visualizar el dendrograma con factoextra
fviz_dend(hc,
cex = 0.5,                   # Tamaño del texto para las etiquetas
lwd = 0.8,                   # Grosor de las líneas del dendrograma
k = 5,                       # Número de clusters
rect = FALSE,                 # Dibujar rectángulos alrededor de los clusters
rect_border = "blue",         # Color del borde de los rectángulos (paleta "jco")
rect_fill = TRUE,            # Relleno de los rectángulos
rect_fill_alpha = 0.2,       # Transparencia del relleno
k_colors = brewer.pal(n = 0, name = "Set3"), # Colores de los clusters
main = "Dendrograma de barrios",
xlab = "Elementos",
ylab = "Altura",
sub = "")
# Instalar y cargar las librerías necesarias
# Instalar y cargar las librerías necesarias
library(factoextra)
library(RColorBrewer)
# Suponiendo que 'resm' es una matriz de distancia o datos
# Convertir 'resm' a una matriz de distancia si es necesario
# dist_matrix <- as.dist(resm) # Si 'resm' no es ya una matriz de distancia
# Realizar el clustering jerárquico
hc <- hclust(as.dist(1-resm)) # Si 'resm' es ya una matriz de distancia, omite as.dist()
# Visualizar el dendrograma con factoextra
fviz_dend(hc,
cex = 0.5,                   # Tamaño del texto para las etiquetas
lwd = 0.8,                   # Grosor de las líneas del dendrograma
k = 5,                       # Número de clusters
rect = FALSE,                 # Dibujar rectángulos alrededor de los clusters
rect_border = "blue",         # Color del borde de los rectángulos (paleta "jco")
rect_fill = FALSE,            # Relleno de los rectángulos
rect_fill_alpha = 0.2,       # Transparencia del relleno
k_colors = brewer.pal(n = 0, name = "Set3"), # Colores de los clusters
main = "Dendrograma de barrios",
xlab = "Elementos",
ylab = "Altura",
sub = "")
# Instalar y cargar las librerías necesarias
# Instalar y cargar las librerías necesarias
library(factoextra)
library(RColorBrewer)
# Suponiendo que 'resm' es una matriz de distancia o datos
# Convertir 'resm' a una matriz de distancia si es necesario
# dist_matrix <- as.dist(resm) # Si 'resm' no es ya una matriz de distancia
# Realizar el clustering jerárquico
hc <- hclust(as.dist(1-resm)) # Si 'resm' es ya una matriz de distancia, omite as.dist()
# Visualizar el dendrograma con factoextra
fviz_dend(hc,
cex = 0.5,                   # Tamaño del texto para las etiquetas
lwd = 0.8,                   # Grosor de las líneas del dendrograma
k = 5,                       # Número de clusters
rect = FALSE,                 # Dibujar rectángulos alrededor de los clusters
rect_border = "black",         # Color del borde de los rectángulos (paleta "jco")
rect_fill = FALSE,            # Relleno de los rectángulos
rect_fill_alpha = 0.2,       # Transparencia del relleno
k_colors = brewer.pal(n = 0, name = "Set3"), # Colores de los clusters
main = "Dendrograma de barrios",
xlab = "Elementos",
ylab = "Altura",
sub = "")
# Instalar y cargar las librerías necesarias
library(factoextra)
library(RColorBrewer)
# Suponiendo que 'resm' es una matriz de distancia o datos
# Convertir 'resm' a una matriz de distancia si es necesario
# dist_matrix <- as.dist(resm) # Si 'resm' no es ya una matriz de distancia
hc <- hclust(as.dist(1-resm)) # Si 'resm' es ya una matriz de distancia, omite as.dist()
# Visualizar el dendrograma con factoextra
fviz_dend(hc,
cex = 0.5,                   # Tamaño del texto para las etiquetas
lwd = 0.8,                   # Grosor de las líneas del dendrograma
k = 5,                       # Número de clusters
rect = FALSE,                 # Dibujar rectángulos alrededor de los clusters
rect_border = "black",         # Color del borde de los rectángulos (paleta "jco")
rect_fill = FALSE,            # Relleno de los rectángulos
rect_fill_alpha = 0.2,       # Transparencia del relleno
k_colors = brewer.pal(n = 0, name = "Set3"), # Colores de los clusters
main = "Dendrograma de barrios",
xlab = "Elementos",
ylab = "Altura",
sub = "")
# Instalar y cargar las librerías necesarias
library(factoextra)
library(RColorBrewer)
# Suponiendo que 'resm' es una matriz de distancia o datos
# Convertir 'resm' a una matriz de distancia si es necesario
# dist_matrix <- as.dist(resm) # Si 'resm' no es ya una matriz de distancia
hc <- hclust(as.dist(1-resm)) # Si 'resm' es ya una matriz de distancia, omite as.dist()
# Visualizar el dendrograma con factoextra
fviz_dend(hc,
cex = 0.5,                   # Tamaño del texto para las etiquetas
lwd = 0.8,                   # Grosor de las líneas del dendrograma
k = 5,                       # Número de clusters
rect = FALSE,                 # Dibujar rectángulos alrededor de los clusters
rect_border = "black",         # Color del borde de los rectángulos (paleta "jco")
rect_fill = FALSE,            # Relleno de los rectángulos
rect_fill_alpha = 0.2,       # Transparencia del relleno
k_colors = brewer.pal(n = 1, name = "Set3"), # Colores de los clusters
main = "Dendrograma de barrios",
xlab = "Elementos",
ylab = "Altura",
sub = "")
df_clusters <- data.frame(Neighbourhood = names(clusters), neighb_id = clusters)
df_madrid <- merge(df_madrid, df_clusters, by = "Neighbourhood")
df_madrid
n <- nrow(df_madrid)
test_size <- 0.3
set.seed(123)
n_test <- as.integer(n*test_size)
idx_test <- sample(1:n, n_test)
test <- df_madrid[idx_test,]
train <- df_madrid[-idx_test,]
train
model <- lm(formula = Square.Meters ~ Accommodates + Bathrooms + Bedrooms + Price, data = train)
summary(model)
model <- lm(formula = Square.Meters ~ Accommodates + Bathrooms + Bedrooms + Price + Review.Scores.Rating, data = train)
model <- lm(formula = Square.Meters ~ Accommodates + Bathrooms + Bedrooms + Price + Review.Scores.Rating, data = train)
df.pred <- data.frame(Accommodates=6, Bathrooms=1, Price=80, Review.Scores.Rating=80, Bedrooms=c(3,4))
df.pred
y_pred <- predict(model, newdata = df.pred)
y_pred
diff(y_pred)
model
y_pred <- predict(model, newdata = test)
error <- y_pred - test$Square.Meters
error2 <- error**2
mse <- mean(error2)
rmse <- sqrt(mse)
rmse
airbnb<-read.csv('airbnb-listings.csv',sep = ';')
options(repr.plot.height=4,repr.plot.width=6,repr.plot.res = 300)
head(airbnb)
library(dplyr)
df_madrid <- airbnb %>%
filter(City == 'Madrid' & Neighbourhood != '' & Room.Type=="Entire home/apt") %>%
select(-c(Room.Type, City))
head(df_madrid)
df_madrid$Square.Meters <- df_madrid$Square.Feet*0.092903
df_madrid
num_na <- sum(is.na(df_madrid$Square.Meters))
# Calcular el número total de apartamentos
total_apartments <- nrow(df_madrid)
# Calcular el porcentaje de apartamentos con valores NA en 'Square.Meters'
percentage_na <- (num_na / total_apartments) * 100
cat("El porcentaje de apartamentos que no muestran los metros cuadrados es:", percentage_na, "%\n")
# Filtrar los apartamentos que tienen un valor de metros cuadrados diferente de NA
non_na_apartments <- df_madrid[!is.na(df_madrid$Square.Meters), ]
# Calcular el número de apartamentos con 0 metros cuadrados
num_zero_meters <- sum(non_na_apartments$Square.Meters == 0)
# Calcular el número total de apartamentos con valor de metros cuadrados diferente de NA
total_non_na_apartments <- nrow(non_na_apartments)
# Calcular el porcentaje de apartamentos con 0 metros cuadrados
percentage_zero_meters <- (num_zero_meters / total_non_na_apartments) * 100
# Mostrar el resultado
cat("El porcentaje de apartamentos con 0 metros cuadrados es:", percentage_zero_meters, "%\n")
df_madrid$Square.Meters <- ifelse(df_madrid$Square.Meters == 0, NA, df_madrid$Square.Meters)
df_madrid
hist(df_madrid$Square.Meters, main = "Histograma de Square.Meters", xlab = "Metros Cuadrados", ylab = "Frecuencia", col = "red", border = "black", breaks = 20, na.rm = TRUE)
library(ggplot2)
ggplot(df_madrid, aes(x = Square.Meters)) +
geom_histogram(binwidth = 10, fill = "red", color = "black") +
labs(title = "Histograma de Square.Meters",
x = "Metros Cuadrados",
y = "Frecuencia") +
theme_minimal()
condicion <- df_madrid$Square.Meters < 20
df_madrid$Square.Meters <- ifelse(condicion, NA, df_madrid$Square.Meters)
df_madrid
df_madrid %>%
filter(is.na(Square.Meters)) %>%
group_by(Neighbourhood) %>%
summarise(freq_na = n()) %>%
arrange(desc(freq_na))
df_madrid_na <- df_madrid
df_madrid <- df_madrid %>%
filter(!is.na(Square.Meters))
df_madrid
table(df_madrid$Neighbourhood)
shapiro_test <- function(group){
shapiro.test(df_madrid$Square.Meters[df_madrid$Neighbourhood == group])
}
results <- lapply(unique(df_madrid$Neighbourhood), shapiro_test)
